<template>
    <lightning-card title="Product Selector" class="slds-p-around_medium">
        <template if:false={productDetails}>
            <div class="slds-m-bottom_medium">
                <lightning-record-picker
                    label="Products"
                    placeholder="Search Products..."
                    object-api-name="Product2"
                    onsuccess={handleProductSelection}
                ></lightning-record-picker>
                <lightning-button label="Submit" onclick={handleSubmit} class="slds-m-top_medium"></lightning-button>
            </div>
        </template>

        <template if:true={productDetails}>
            <lightning-card title="Product Details" class="slds-p-around_medium">
                <div class="slds-m-bottom_medium">
                    <lightning-input label="Product Name" value={productDetails.Name} disabled class="slds-m-left_small"></lightning-input>
                    <lightning-input label="Product Category" value={productDetails.Family} disabled class="slds-m-left_small"></lightning-input>
                    <lightning-input label="Product Subcategory" value={productDetails.Product_Sub_Category__c} disabled class="slds-m-left_small"></lightning-input>
                </div>
                <div class="slds-m-bottom_medium">
                    <lightning-input type="date" label="Date of Purchase" value={dateOfPurchase} onchange={handleInputChange} data-id="dateOfPurchase" class="slds-m-left_small"></lightning-input>
                    <lightning-input type="date" label="Date of Installation" value={dateOfInstallation} onchange={handleInputChange} data-id="dateOfInstallation" class="slds-m-left_small"></lightning-input>
                    <lightning-input label="Sales Product Code" value={salesProductCode} onchange={handleInputChange} data-id="salesProductCode" class="slds-m-left_small"></lightning-input>
                    <lightning-input label="Invoice Number" value={invoiceNumber} onchange={handleInputChange} data-id="invoiceNumber" class="slds-m-left_small"></lightning-input>
                    <lightning-input type="date" label="Warranty Start Date" value={warrantyStartDate} onchange={handleInputChange} data-id="warrantyStartDate" class="slds-m-left_small"></lightning-input>
                    <lightning-input type="date" label="Warranty End Date" value={warrantyEndDate} onchange={handleInputChange} data-id="warrantyEndDate" class="slds-m-left_small"></lightning-input>
                    <lightning-input label="Source of Purchase" value={sourceOfPurchase} onchange={handleInputChange} data-id="sourceOfPurchase" class="slds-m-left_small"></lightning-input>
                    <lightning-textarea label="Remarks" value={remarks} onchange={handleInputChange} data-id="remarks" class="slds-m-left_small"></lightning-textarea>
                    <lightning-input type="checkbox" label="Rental Asset" checked={rentalAsset} onchange={handleCheckboxChange} data-id="rentalAsset" class="slds-m-left_small"></lightning-input>
                </div>
                <lightning-button label="Save" onclick={handleSave} class="slds-m-top_medium slds-m-left_small"></lightning-button>
            </lightning-card>
        </template>
    </lightning-card>
</template>




import { LightningElement, track, api } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import getProductDetailsBasedOnId from '@salesforce/apex/AssetOnboardingController.getProductDetailsBasedOnId';
import updateAssetDetailsWithWorkOrder from '@salesforce/apex/AssetOnboardingController.updateAssetDetailsWithWorkOrder';

export default class ProductSelector extends LightningElement {
    @api recordId; // Assuming this is the WorkOrderLineItem Id
    @track productDetails;
    @track dateOfPurchase = '';
    @track dateOfInstallation = '';
    @track salesProductCode = '';
    @track invoiceNumber = '';
    @track warrantyStartDate = '';
    @track warrantyEndDate = '';
    @track sourceOfPurchase = '';
    @track remarks = '';
    @track rentalAsset = false;

    selectedProductId;

    handleProductSelection(event) {
        this.selectedProductId = event.detail.recordId;
    }

    handleSubmit() {
        if (this.selectedProductId) {
            getProductDetailsBasedOnId({ productId: this.selectedProductId })
                .then(result => {
                    this.productDetails = result;
                })
                .catch(error => {
                    this.showToast('Error', 'Failed to retrieve product details', 'error');
                });
        } else {
            this.showToast('Error', 'Please select a product', 'error');
        }
    }

    handleInputChange(event) {
        const field = event.target.dataset.id;
        this[field] = event.target.value;
    }

    handleCheckboxChange(event) {
        this.rentalAsset = event.target.checked;
    }

    handleSave() {
        updateAssetDetailsWithWorkOrder({
            workOrderLineItemId: this.recordId,
            dateOfPurchase: this.dateOfPurchase,
            dateOfInstallation: this.dateOfInstallation,
            salesProductCode: this.salesProductCode,
            invoiceNumber: this.invoiceNumber,
            warrantyStartDate: this.warrantyStartDate,
            warrantyEndDate: this.warrantyEndDate,
            sourceOfPurchase: this.sourceOfPurchase,
            remarks: this.remarks,
            rentalAsset: this.rentalAsset,
            productId: this.selectedProductId
        })
        .then(() => {
            this.showToast('Success', 'Asset details saved successfully', 'success');
        })
        .catch(error => {
            this.showToast('Error', error.body.message, 'error');
        });
    }

    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        });
        this.dispatchEvent(event);
    }
}
