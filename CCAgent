<template>
    <lightning-card title="SMS Verification" icon-name="custom:custom63">
        <div class="slds-m-around_medium custom-button-container">
            <lightning-button class="custom-button" label="Send SMS" onclick={handleSendSms}></lightning-button>
        </div>
        <div class="slds-m-around_medium custom-input-container">
            <lightning-input class="custom-input" label="Enter OTP" value={otp} onchange={handleOtpChange}></lightning-input>
        </div>
        <div class="slds-m-around_medium custom-button-container">
            <lightning-button class="custom-button" label="Verify OTP" onclick={handleVerifyOtp}></lightning-button>
        </div>
    </lightning-card>
</template>



import { LightningElement, api, track } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import updateServiceAppointmentStatus from '@salesforce/apex/SmsController.updateServiceAppointmentStatus';

export default class SmsComponent extends LightningElement {
    @api recordId;
    @track otp = '';

    handleSendSms() {
        this.showToast('SMS sent', 'SMS has been sent to the customer', 'success');
    }

    handleOtpChange(event) {
        this.otp = event.target.value;
    }

    handleVerifyOtp() {
        if (this.otp === '454545') {
            this.showToast('OTP Verified', 'The OTP is correct', 'success');
            updateServiceAppointmentStatus({ recordId: this.recordId })
                .then(() => {
                    this.showToast('Success', 'Service Appointment status updated to Cancelled', 'success');
                })
                .catch(error => {
                    this.showToast('Error', error.body.message, 'error');
                });
        } else {
            this.showToast('Invalid OTP', 'The OTP entered is incorrect', 'error');
        }
    }

    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant,
        });
        this.dispatchEvent(event);
    }
}



public with sharing class SmsController {
    @AuraEnabled
    public static void updateServiceAppointmentStatus(Id recordId) {
        try {
            ServiceAppointment appointment = [SELECT Id, Status FROM ServiceAppointment WHERE Id = :recordId LIMIT 1];
            appointment.Status = 'Canceled';
            update appointment;
            System.debug('SA-->' + appointment);
        } catch (Exception e) {
            throw new AuraHandledException('Error updating ServiceAppointment status: ' + e.getMessage());
        }
    }
}
